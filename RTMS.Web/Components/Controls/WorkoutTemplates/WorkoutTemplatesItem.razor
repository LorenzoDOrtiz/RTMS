@inject IActiveWorkoutService ActiveWorkoutService
@inject IDeleteWorkoutTemplateUseCase DeleteWorkoutUseCase
@inject NavigationManager NavigationManager

@if (WorkoutTemplate != null)
{
    <tr>
        <td>@WorkoutTemplate.Name</td> 
        <td style="padding: 3px;">
            <MudCardActions Class="justify-end">
                <MudButton OnClick="StartWorkout" Color="Color.Success" Variant="Variant.Filled">
                    Start
                </MudButton>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open workout options">
                <MudMenuItem Icon="@Icons.Material.Filled.Edit" IconColor="Color.Info" Href="@($"workouts/edit-workout-template/{WorkoutTemplate.Id}")">Edit</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.DeleteForever" IconColor="Color.Error" OnClick="DeleteWorkoutTemplate">Delete</MudMenuItem>
                </MudMenu>
            </MudCardActions>
        </td>  
    </tr>
}

@code {
    [Parameter]
    public WorkoutTemplate? WorkoutTemplate { get; set; }

    private async Task StartWorkout()
    {
        if (WorkoutTemplate != null)
        {
            await ActiveWorkoutService.StartWorkoutAsync(1, WorkoutTemplate);
            NavigationManager.NavigateTo("/workout-in-progress");
        }
    }

    private async Task DeleteWorkoutTemplate()
    {
        await DeleteWorkoutUseCase.ExecuteAsync(WorkoutTemplate);
        WorkoutTemplate = null;
    }
}
