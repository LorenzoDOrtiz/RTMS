<MudSimpleTable Dense Elevation="3">
    <thead>
        <tr>
            <th>
                <MudTextField @bind-Value="Exercise.Name"
                              Label="Exercise Name"
                              Variant="Variant.Filled"
                              Margin="Margin.Dense"
                              Required
                              Immediate="true" 
                              OnBlur="ExerciseNameChanged" />
            </th>
            <th>Reps</th>
            <th>Weight</th>
            <th>
                <ExerciseMenu OnSetAdded="HandleSetAdded"
                              OnRestTimerOpened="HandleRestTimerOpened"
                              OnExerciseDeleted="HandleExerciseDeleted" />

                <RestTimerMenu IsRestTimerOpen="@Exercise.IsRestTimerOpen"
                               RestTimerValue="@Exercise.RestTimerValue"
                               RestTimerUnit="@Exercise.RestTimerUnit"      
                               OnRestTimerCancel="HandleRestTimerCancel"
                               OnRestTimerSet="@((args) => HandleRestTimerSet(args.Item1, args.Item2))" />
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Exercise.Sets != null && Exercise.Sets.Any())
        {
            @for (int i = 0; i < Exercise.Sets.Count; i++)
            {
                var set = Exercise.Sets[i];

                <WorkoutTemplateSet Set="set" 
                                    SetIndex="i"
                                    OnSetDelete="HandleSetDelete" />
            }
        }
    </tbody>
</MudSimpleTable>

@code {
    [Parameter]
    public ExerciseTemplateViewModel Exercise { get; set; }

    [Parameter]
    public EventCallback<int> OnExerciseDeleted { get; set; }

    [Parameter]
    public EventCallback OnExerciseNameChanged { get; set; }

    private async Task ExerciseNameChanged()
    {
        await OnExerciseNameChanged.InvokeAsync();
    }

    private void HandleSetAdded()
    {
        Exercise.Sets?.Add(new ExerciseTemplateSetViewModel
            { 
                Id = Exercise.Sets.Any() ? Exercise.Sets.Max(s => s.Id) + 1 : 1,
                Reps = 10, 
                Weight = 0 
            });
    }

    private void HandleRestTimerOpened()
    {
        Exercise.IsRestTimerOpen = true;
    }

    private async Task HandleExerciseDeleted()
    {
        await OnExerciseDeleted.InvokeAsync(Exercise.Id);
    }

    private void HandleRestTimerCancel()
    {
        Exercise.IsRestTimerOpen = false;
    }

    private void HandleRestTimerSet(int restTimerValue, string restTimerUnit)
    {
        Exercise.RestTimerUnit = restTimerUnit;
        Exercise.RestTimerValue = restTimerValue;
        Exercise.IsRestTimerOpen = false;
    }

    private void HandleSetDelete(int setId)
    {
        if (Exercise.Sets.Count > 0)
        {
            var setToDelete = Exercise.Sets.FirstOrDefault(s => s.Id == setId);

            if (setToDelete != null)
            {
                Exercise.Sets.Remove(setToDelete);
            }
        }
    }
}