@inject UserService UserService

<MudSimpleTable Dense Elevation="3">
    <thead>
        <tr>
            <th>
                <MudTextField T="string"
                              @bind-Value="Exercise.Name"
                              Label="Exercise Name"
                              Variant="Variant.Filled"
                              Margin="Margin.Dense"
                              Required="true"
                              RequiredError="Exercise Name Required."
                              Clearable="true" 
                               />

            </th>
            <th>Reps</th>
            <th>Weight</th>
            <th>
                <ExerciseMenu ExerciseCount="ExerciseCount"
                              OnSetAdded="HandleSetAdded"
                              OnRestTimerOpened="HandleRestTimerOpened"
                              OnExerciseDeleted="HandleExerciseDeleted"
                              OnNoteOpened="HandleNoteOpened" />

                <RestTimerMenu IsRestTimerOpen="@Exercise.IsRestTimerOpen"
                               RestTimerValue="@Exercise.RestTimerValue"
                               RestTimerUnit="@Exercise.RestTimerUnit"
                               OnRestTimerCancel="HandleRestTimerCancel"
                               OnRestTimerSet="@((args) => HandleRestTimerSet(args.Item1, args.Item2))" />

                <NotePopover IsNotePopoverOpen="@Exercise.IsNotePopOverOpen" Note="@Exercise.Note" OnNoteSave="HandleNoteSave" OnFocusLost="HandleFocusLost" />
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Exercise.Sets != null && Exercise.Sets.Any())
        {
            @for (int i = 0; i < Exercise.Sets.Count; i++)
            {
                var set = Exercise.Sets[i];

                <WorkoutTemplateSet Set="set" SetIndex="i" SetsCount="Exercise.Sets.Count" OnSetDelete="HandleSetDelete" />
            }
        }
    </tbody>
</MudSimpleTable>

@code {
    [Parameter]
    public ExerciseTemplateViewModel Exercise { get; set; }

    [Parameter]
    public int ExerciseCount { get; set; }

    [Parameter]
    public EventCallback<ExerciseTemplateViewModel> OnExerciseDeleted { get; set; }

    [Parameter]
    public EventCallback OnExerciseNameChanged { get; set; }

    private void HandleSetAdded()
    {
        Exercise.Sets?.Add(new());
    }

    private void HandleRestTimerOpened()
    {
        Exercise.IsRestTimerOpen = true;
    }

    private async Task HandleExerciseDeleted()
    {
        await OnExerciseDeleted.InvokeAsync(Exercise);
    }

    private void HandleRestTimerCancel()
    {
        Exercise.IsRestTimerOpen = false;
    }

    private void HandleRestTimerSet(int restTimerValue, string restTimerUnit)
    {
        Exercise.IsRestTimerOpen = false;
        Exercise.RestTimerUnit = restTimerUnit;
        Exercise.RestTimerValue = restTimerValue;
    }

    private void HandleSetDelete(int setId)
    {

        var setToDelete = Exercise.Sets.FirstOrDefault(s => s.Id == setId);

        if (setToDelete != null)
        {
            Exercise.Sets.Remove(setToDelete);

        }

    }

    private void HandleNoteOpened()
    {
        Exercise.IsNotePopOverOpen = true;
    }

    private void HandleNoteSave(string newNote)
    {
        Exercise.Note = newNote;
    }

    private void HandleFocusLost()
    {
        Exercise.IsNotePopOverOpen = false;
    }
}