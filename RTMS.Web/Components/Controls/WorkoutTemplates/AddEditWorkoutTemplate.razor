<MudStack Spacing="4">
    <WorkoutTemplateHeader WorkoutName="@_viewModel.Name"
                           OnWorkoutNameChanged="HandleWorkoutNameChange" />

    @if (_viewModel.Exercises != null && _viewModel.Exercises.Any())
    {
        foreach (var exercise in _viewModel.Exercises)
        {
            <WorkoutTemplateExercise Exercise="exercise"
                                     OnExerciseDeleted="HandleExerciseDeleted"
                                     OnExerciseNameChanged="RecalculateSaveDisabled" />
        }
    }

    <WorkoutTemplateButtons Exercises="@_viewModel.Exercises"
                            OnSave="HandleValidation"
                            OnExerciseAdded="HandleExerciseAdded" 
                            IsSaveDisabled="@IsSaveDisabled" />
</MudStack>

@code {
    private WorkoutTemplateViewModel _viewModel;

    [Parameter]
    public WorkoutTemplate WorkoutTemplate { get; set; }

    [Parameter]
    public bool IsForEdit { get; set; }

    [Parameter]
    public EventCallback OnValidationSuccess { get; set; }

    private bool IsSaveDisabled;

    protected override void OnParametersSet()
    {
        InitializeViewModel();
    }

    private void InitializeViewModel()
    {
        _viewModel = new WorkoutTemplateViewModel
            {
                Name = WorkoutTemplate.Name,
                Exercises = WorkoutTemplate.Exercises.Select(e => new ExerciseTemplateViewModel
                {
                    Name = e.Name,
                    RestTimerValue = e.RestTimerValue,
                    RestTimerUnit = e.RestTimerUnit,
                    Sets = e.Sets.Select(s => new ExerciseTemplateSetViewModel
                    {

                        Weight = s.Weight, 
                        Reps = s.Reps
                    }).ToList(),
                    Note = e.Note
                }).ToList()
            };

        if (!IsForEdit)
        {
            HandleExerciseAdded();
        }

        RecalculateSaveDisabled();
    }

    private void HandleExerciseAdded()
    {
        _viewModel.Exercises.Add(new ExerciseTemplateViewModel
            {
                Name = "",
                Sets = new List<ExerciseTemplateSetViewModel>()
                {
                    new ExerciseTemplateSetViewModel 
                    {
                        Reps = 10, 
                        Weight = 0 
                    }
                }
            });
        RecalculateSaveDisabled();
    }

    private void RecalculateSaveDisabled()
    {
        IsSaveDisabled = string.IsNullOrWhiteSpace(_viewModel.Name)
                         || _viewModel.Exercises.Any(e => string.IsNullOrWhiteSpace(e.Name));
    }

    private void HandleWorkoutNameChange(string newName)
    {
        _viewModel.Name = newName;
        RecalculateSaveDisabled();

    }

    private void HandleExerciseDeleted(ExerciseTemplateViewModel exercise)
    {
        if (exercise != null)
        {
            _viewModel.Exercises.Remove(exercise);
        }
        RecalculateSaveDisabled();
    }

    private async Task HandleValidation()
    {
        // Perform validation before saving.
        if (IsSaveDisabled)
        {
            return; // Prevent save if validation fails.
        }
        else
        {
            // Update the actual model from the view model
            WorkoutTemplate.Name = _viewModel.Name;
            WorkoutTemplate.Exercises = _viewModel.Exercises.Select(e => new ExerciseTemplate
                {
                    Name = e.Name,
                    RestTimerValue = e.RestTimerValue,
                    RestTimerUnit = e.RestTimerUnit,
                    Sets = e.Sets.Select(s => new ExerciseTemplateSet
                    {
                        Reps = s.Reps, 
                        Weight = s.Weight

                    }).ToList(),
                    Note = e.Note
                }).ToList();

            await OnValidationSuccess.InvokeAsync();
        }
    }
}
