@inject IAddWorkoutTemplateUseCase AddWorkoutUseCase
@inject IMapper Mapper
@inject NavigationManager NavigationManager
@inject UserService UserService

@if (_workoutTemplateViewModel != null)
{
    <MudForm @ref="form" @bind-IsValid="@validForm">
        <MudStack Spacing="4">
            <WorkoutTemplateHeader WorkoutName="@_workoutTemplateViewModel.Name" OnWorkoutNameChanged="HandleWorkoutNameChange" />
            @if (_workoutTemplateViewModel.Exercises != null)
            {
                @foreach (var exercise in _workoutTemplateViewModel.Exercises)
                {
                    <WorkoutTemplateExercise Exercise="exercise" ExerciseCount="_workoutTemplateViewModel.Exercises.Count" OnExerciseDeleted="HandleExerciseDeleted" />
                }
                <WorkoutTemplateButtons OnSave="HandleSave" OnExerciseAdded="HandleExerciseAdded" IsSaveDisabled="@validForm" />
            }
        </MudStack>
    </MudForm>
}

@code {
    private WorkoutTemplateViewModel _workoutTemplateViewModel = new();
    bool validForm;
    MudForm? form;

    protected override void OnInitialized()
    {
        _workoutTemplateViewModel.UserId = UserService.UserId;
        HandleExerciseAdded();
    }

    private void HandleWorkoutNameChange(string newWorkoutName)
    {
        _workoutTemplateViewModel.Name = newWorkoutName;
        ValidateForm();
    }

    private void HandleExerciseAdded()
    {
        _workoutTemplateViewModel?.Exercises?.Add(new ExerciseTemplateViewModel
            {
                Sets = new() { new() }
            });
        ValidateForm();
    }

    private void HandleExerciseDeleted(ExerciseTemplateViewModel exerciseTemplateViewModel)
    {
        if (exerciseTemplateViewModel != null)
        {
            _workoutTemplateViewModel.Exercises?.Remove(exerciseTemplateViewModel);
            ValidateForm();
        }
    }

    private bool ValidateWorkoutName()
    {
        if (_workoutTemplateViewModel != null)
        {
            return !string.IsNullOrWhiteSpace(_workoutTemplateViewModel.Name);
        }
        return true;
    }

    private bool ValidateExerciseNames()
    {
        if (_workoutTemplateViewModel.Exercises != null)
        {
            return _workoutTemplateViewModel.Exercises.All(exercise => !string.IsNullOrWhiteSpace(exercise.Name));
        }
        return true;
    }

    private bool ValidateForm()
    {
        validForm = ValidateWorkoutName() && ValidateExerciseNames();
        return validForm;
    }

    private async Task HandleSave()
    {
        var workoutTemplate = Mapper.Map<WorkoutTemplate>(_workoutTemplateViewModel);
        if (UserService.IsTrainer)
        {
            workoutTemplate.IsTrainerCreated = true;
        }
        await AddWorkoutUseCase.ExecuteAsync(workoutTemplate);
        NavigationManager.NavigateTo("/workouts");
    }
}