<MudCard Elevation="3" Class="mb-4">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField Value="ViewModel?.Name"
                              Label="Workout Name"
                              Variant="Variant.Filled"
                              Margin="Margin.Dense"
                              Required
                              Clearable="true"
                              Immediate="true"
                              OnBlur="WorkoutNameChanged" />
            </MudItem>

            <MudItem xs="6" Class="d-flex justify-end align-center">
                <div style="margin-left: auto; display: flex;">
                    <WorkoutTimer StartTime="ViewModel.StartTime"
                                  CancellationTokenSourceWorkout="@CancellationTokenSourceExercise" />

                    <RestTimer RestTimerSecondsBetweenSets="RestTimerSecondsBetweenSets"
                                CancellationTokenSourceRest="@CancellationTokenSourceRest" />
                    
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                             AriaLabel="Open workout options"
                             AnchorOrigin="Origin.BottomLeft"
                             TransformOrigin="Origin.TopCenter">
                        <MudMenuItem OnClick="ExerciseAdded"
                                     Icon="@Icons.Material.Filled.AddCircle"
                                     IconColor="Color.Success">
                            Add Exercise
                        </MudMenuItem>
                    </MudMenu>
                </div>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public WorkoutViewModel? ViewModel { get; set; }

    [Parameter]
    public CancellationTokenSource? CancellationTokenSourceExercise { get; set; }

    [Parameter]
    public CancellationTokenSource? CancellationTokenSourceRest { get; set; }

    [Parameter]
    public int RestTimerSecondsBetweenSets { get; set; }

    [Parameter]
    public EventCallback<string> OnWorkoutNameChanged { get; set; }

    [Parameter]
    public EventCallback OnExerciseAdded { get; set; }

    private async Task ExerciseAdded()
    {
        if (OnExerciseAdded.HasDelegate)
        {
            await OnExerciseAdded.InvokeAsync();
        }
    }

    private async Task WorkoutNameChanged()
    {
        if (OnWorkoutNameChanged.HasDelegate)
        {
            await OnWorkoutNameChanged.InvokeAsync(ViewModel.Name);
        }
    }
}