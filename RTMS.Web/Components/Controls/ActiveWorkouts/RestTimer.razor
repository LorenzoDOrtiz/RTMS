@inject RestTimerService RestTimerService
@implements IDisposable

@if (RestTimerService.IsRunning)
{
    <div style="display: flex; align-items: center; padding: 5px; margin-left: 5px;">
        <MudIcon Icon="@Icons.Material.Filled.Timer" Color="Color.Info" />
        <MudText Typo="Typo.subtitle2" Class="ml-2">
            @RestTimerService.RemainingTime.ToString(@"hh\:mm\:ss")
        </MudText>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        // Subscribe to the RestTimerService's OnTimerChanged event
        RestTimerService.OnTimerChanged += TimerChangedHandler;
    }

    private void TimerChangedHandler()
    {
        // Trigger a UI update when the timer changes
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        RestTimerService.OnTimerChanged -= TimerChangedHandler;
    }
}
