@inject WorkoutTimerService WorkoutTimerService
@implements IDisposable

<div style="display: flex; align-items: center; padding: 5px; margin-left: 5px;">
    <MudIcon Icon="@Icons.Material.Filled.AccessTimeFilled" Color="Color.Dark" />
    <MudText Typo="Typo.subtitle2" Class="ml-2">@WorkoutTimerService.ElapsedTime.ToString(@"hh\:mm\:ss")</MudText>
</div>

@code {
    [Parameter]
    public DateTime StartTime { get; set; }

    protected override void OnParametersSet()
    {
        // Start the timer whenever StartTime is updated
        WorkoutTimerService.StartTimer(StartTime);
    }

    protected override void OnInitialized()
    {
        // Subscribe to the WorkoutTimerService's OnTimerChanged event
        WorkoutTimerService.OnTimerChanged += TimerChangedHandler;
    }

    private void TimerChangedHandler()
    {
        // Trigger a UI update when the timer changes
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        WorkoutTimerService.OnTimerChanged -= TimerChangedHandler;
    }
}
