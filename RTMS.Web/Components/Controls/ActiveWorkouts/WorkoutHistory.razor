@inject IViewWorkoutHistoryByUserIdUseCase ViewWorkoutHistoryByUserIdUseCase
@inject NavigationManager NavigationManager

<MudTable Items="@ClientWorkoutHistory" Filter="new Func<Workout, bool>(FilterFunc1)" Virtualize SortLabel="Sort By">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @if(FirstName != null)
            {
                <span>@FirstName's Workout History</span>
            }
            else
            {
                <span>Workout History</span>
            }
        </MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Workout, object>(x=>x.Name)">Workout</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Workout, object>(x=>x.StartTime)">Start</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Workout, object>(x=>x.EndTime)">End</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Workout, object>(x=>x.Duration)">Duration</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Workout">
            <MudLink Href=@($"/detailed-workout-view/{context.Id}") Color="Color.Primary">
                @context.Name
            </MudLink>
        </MudTd>
        <MudTd DataLabel="Start">@context.StartTime.ToLocalTime().ToString("M/d/yyyy h:mm tt")</MudTd>
        <MudTd DataLabel="End">
            @if (@context.EndTime.HasValue)
            {
                @context.EndTime.Value.ToLocalTime().ToString("M/d/yyyy h:mm tt")
            }
            else
            {
                <span></span>
            }
        </MudTd>
        <MudTd DataLabel="Duration">
            @if (@context.Duration.HasValue)
            {
                var duration = @context.Duration;
                @(duration.Value.TotalMinutes < 1 ? "< 1 min" : $"{duration.Value.TotalHours:F0} hr {duration.Value.Minutes} min")
            }
            else
            {
                <span></span>
            }

        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="[3, 6, 9, 12]" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public string FirstName { get; set; }

    private IEnumerable<Workout> ClientWorkoutHistory = new List<Workout>();

    protected override async Task OnInitializedAsync()
    {
        ClientWorkoutHistory = await ViewWorkoutHistoryByUserIdUseCase.ExecuteAsync(Id);
    }

    private string searchString = "";

    private bool FilterFunc1(Workout workout) => FilterFunc(workout, searchString);

    private bool FilterFunc(Workout workout, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        string startTimeString = workout.StartTime.ToLocalTime().ToString("M/d/yyyy h:mm tt");
        string endTimeString = workout.EndTime.HasValue ? workout.EndTime.Value.ToLocalTime().ToString("M/d/yyyy h:mm tt") : string.Empty;

        if (startTimeString.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (endTimeString.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (workout.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void GoToDetailedWorkoutView(int workoutId)
    {
        NavigationManager.NavigateTo($"/detailed-workout-view/{workoutId}");
    }
}
