@inject IJSRuntime JSRuntime
@inject IGetAllDetailedWorkoutDataByUserId GetAllDetailedWorkoutDataByUserId
@inject UserService UserService

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="DownloadWorkoutData" Disabled="@(FilteredWorkouts.Any() ? false : true)">
    Download Workout Data
</MudButton>

@code {
    [Parameter]
    public List<Workout> FilteredWorkouts { get; set; } // Pass this from the Reports page

    public void SetFilteredWorkouts(List<Workout> workouts)
    {
        FilteredWorkouts = workouts;
    }

    private async Task DownloadWorkoutData()
    {
        // Use filtered workouts instead of all workouts
        var csvContent = GenerateCsv(FilteredWorkouts);
        var fileName = $"Workout_Data_{DateTime.Now:yyyyMMdd_HHmmss}.csv";

        // Call the JavaScript function to download the file
        await JSRuntime.InvokeVoidAsync("downloadCSV", fileName, csvContent);
    }

    private string GenerateCsv(List<Workout> workouts)
    {
        var csv = new StringBuilder();
        csv.AppendLine("Workout ID,Workout Name,Start Time,End Time,Total Workout Volume,Exercise Name,Set Number,Reps,Weight,Exercise Volume");
        foreach (var workout in workouts)
        {
            if (workout.Exercises != null && workout.Exercises.Any())
            {
                foreach (var exercise in workout.Exercises)
                {
                    var exerciseVolume = exercise.TotalExerciseVolume;
                    int setNumber = 1;
                    foreach (var set in exercise.Sets)
                    {
                        var line = $"{workout.Id},{workout.Name},{workout.StartTime},{workout.EndTime}," +
                                   $"{workout.TotalWorkoutVolume}," +
                                   $"{exercise.Name},{setNumber},{set.Reps},{set.Weight},{exerciseVolume}";
                        csv.AppendLine(line);
                        setNumber++;
                    }
                }
            }
            else
            {
                var line = $"{workout.Id},{workout.Name},{workout.StartTime},{workout.EndTime},{workout.TotalWorkoutVolume},,,,,"; // Additional commas for exercise data
                csv.AppendLine(line);
            }
        }
        return csv.ToString();
    }
}
