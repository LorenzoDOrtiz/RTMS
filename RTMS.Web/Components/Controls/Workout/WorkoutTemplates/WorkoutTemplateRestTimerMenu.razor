<MudPopover Open="IsRestTimerOpen" Class="px-4 pt-2 pb-2">
    <MudText Typo="Typo.body1" Class="mb-2">Set Rest Timer</MudText>
    <MudGrid>
        <MudItem xs="6">
            <MudNumericField Value="RestTimerValue"
                             ValueChanged="OnRestTimerValueChanged"
                             Label="Duration"
                             Variant="Variant.Filled"
                             Min="1"
                             Max="@(RestTimerUnit == "minutes" ? 60 : 3600)"
                             Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="6">
            <MudSelect T="string"
                       Value="RestTimerUnit"
                       ValueChanged="OnRestTimerUnitChanged"
                       Label="Unit"
                       Variant="Variant.Filled"
                       Margin="Margin.Dense"
                       Dense >
                <MudSelectItem Value="@("seconds")">Seconds</MudSelectItem>
                <MudSelectItem Value="@("minutes")">Minutes</MudSelectItem>
            </MudSelect>
        </MudItem>
    </MudGrid>
    <MudGrid Justify="Justify.FlexEnd" Class="mt-0">
        <MudItem>
            <MudButton Color="Color.Error"
                       OnClick="CloseRestTimer"
                       Class="mr-2"
                       Variant="Variant.Text">
                Cancel
            </MudButton>
            <MudButton Color="Color.Success"
                       OnClick="SetRestTimer"
                       Variant="Variant.Filled">
                Set Timer
            </MudButton>
        </MudItem>
    </MudGrid>
</MudPopover>

@code {
    [Parameter]
    public bool IsRestTimerOpen { get; set; }

    [Parameter]
    public int RestTimerValue { get; set; }

    [Parameter]
    public string RestTimerUnit { get; set; }

    [Parameter]
    public EventCallback<string> OnRestTimerUnitChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnRestTimerValueChanged { get; set; }

    [Parameter]
    public EventCallback OnRestTimerCancel { get; set; }

    [Parameter]
    public EventCallback<int> OnRestTimerSet { get; set; }

    private void SetRestTimer()
    {
        if (RestTimerValue <= 0)
        {
            return;
        }

        int durationInSeconds = RestTimerUnit == "minutes" ? RestTimerValue * 60 : RestTimerValue;
        OnRestTimerSet.InvokeAsync(durationInSeconds);
    }

    private void CloseRestTimer()
    {
        OnRestTimerCancel.InvokeAsync();
    }
}