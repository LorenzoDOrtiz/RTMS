<MudSimpleTable Dense Elevation="3">
    <thead>
        <tr>
            <th>
                <MudTextField @bind-Value="Exercise.Name"
                              Label="Exercise Name"
                              Variant="Variant.Filled"
                              Margin="Margin.Dense" />
            </th>
            <th>Reps</th>
            <th>Weight</th>
            <th>
                <WorkoutTemplateExerciseMenu OnSetAdded="HandleSetAdded"
                                             OnRestTimerOpened="HandleRestTimerOpened"
                                             OnExerciseDeleted="HandleExerciseDeleted" />

                <MudPopover Open="@Exercise.IsRestTimerOpen" Class="px-4 pt-2 pb-2">
                    <MudText Typo="Typo.body1" Class="mb-2">Set Rest Timer</MudText>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudNumericField @bind-Value="Exercise.RestTimerValue"
                                             Label="Duration"
                                             Variant="Variant.Filled"
                                             Min="1"
                                             Max="@(Exercise.RestTimerUnit == "minutes" ? 60 : 3600)"
                                             Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect T="string"
                                       @bind-Value="Exercise.RestTimerUnit"
                                       Label="Unit"
                                       Variant="Variant.Filled"
                                       Margin="Margin.Dense"
                                       Dense>
                                <MudSelectItem Value="@("seconds")">Seconds</MudSelectItem>
                                <MudSelectItem Value="@("minutes")">Minutes</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Justify="Justify.FlexEnd" Class="mt-0">
                        <MudItem>
                            <MudButton Color="Color.Error"
                                       OnClick="@(() => Exercise.IsRestTimerOpen = false)"
                                       Class="mr-2"
                                       Variant="Variant.Text">
                                Cancel
                            </MudButton>
                            <MudButton Color="Color.Success"
                                       OnClick="SetRestTimer"
                                       Variant="Variant.Filled">
                                Set Timer
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPopover>
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Exercise.Sets != null && Exercise.Sets.Any())
        {
            @for (int i = 0; i < Exercise.Sets.Count; i++)
            {
                var set = Exercise.Sets[i];

                <WorkoutTemplateSet Set="set" 
                                    SetIndex="i"
                                    OnSetDelete="HandleSetDelete"/>
            }
        }
    </tbody>
</MudSimpleTable>

@code {
    [Parameter]
    public ExerciseTemplate? Exercise { get; set; }

    [Parameter]
    public EventCallback<int> OnExerciseDeleted { get; set; }


    private void HandleSetAdded()
    {
        Exercise.Sets?.Add(new ExerciseTemplateSet 
            { 
                Id = Exercise.Sets.Any() ? Exercise.Sets.Max(s => s.Id) + 1 : 1,
                Reps = 10, 
                Weight = 0 
            });
    }

    private void HandleRestTimerOpened()
    {
        Exercise.IsRestTimerOpen = true;
    }

    private void HandleExerciseDeleted()
    {
        OnExerciseDeleted.InvokeAsync(Exercise.Id);
    }

    private void SetRestTimer()
    {
        int durationInSeconds = Exercise.RestTimerUnit == "minutes" ? Exercise.RestTimerValue * 60 : Exercise.RestTimerValue;

        if (durationInSeconds != 0)
        {
            Exercise.RestTimeBetweenSets = durationInSeconds;
        }
        Exercise.IsRestTimerOpen = false;
    }

    private void HandleSetDelete(int setId)
    {
        if (Exercise.Sets.Count > 0)
        {
            var setToDelete = Exercise.Sets.FirstOrDefault(s => s.Id == setId);

            if (setToDelete != null)
            {
                Exercise.Sets.Remove(setToDelete);
            }
        }
    }
}