@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject RestTimerService RestTimerService
@inject UserService UserService
@inject ActiveWorkoutService ActiveWorkoutService
@inject IGetActiveWorkoutByUserIdUseCase GetActiveWorkoutByUserIdUseCase
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider @bind-IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-2">RTMS</MudText>

        @if (UserService.IsUserAuthenticated)
        {
            @if (ActiveWorkoutService.ActiveWorkout != null && !IsWorkoutInProgressPage())
            {
                        <div style="margin-left: auto; display: flex; align-items: center; justify-content: space-around;">
                            <MudButton StartIcon="@Icons.Material.Filled.MonitorHeart"
                                       Color="Color.Success"
                                       Variant="Variant.Filled"
                                       Href="@($"/workout-in-progress/{ActiveWorkoutService.ActiveWorkout.Id}")">
                        @ActiveWorkoutService.ActiveWorkout.Name
                            </MudButton>
                            <MainLayoutWorkoutTimer />
                            <MainLayoutRestTimer />
                        </div>
            }
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MyNavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _isDarkMode = true;
    private bool _drawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            if (!UserService.IsUserAuthenticated)
            {
                await UserService.LoadUserAsync();
                await LoadActiveWorkout();
            }
        }

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async Task LoadActiveWorkout()
    {
        if (ActiveWorkoutService.ActiveWorkout == null)
        {
            var userId = UserService.UserId; // Use the cached user ID
            ActiveWorkoutService.ActiveWorkout = await GetActiveWorkoutByUserIdUseCase.ExecuteAsync(userId);
            StateHasChanged(); // Trigger UI update
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (UserService.IsUserAuthenticated)
        {
            await LoadActiveWorkout(); // Reload active workout on location change
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private bool IsWorkoutInProgressPage()
    {
        var uri = new Uri(NavigationManager.Uri);
        return uri.AbsolutePath.StartsWith("/workout-in-progress", StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

