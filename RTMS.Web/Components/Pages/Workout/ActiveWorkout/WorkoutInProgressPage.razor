@page "/workout-in-progress"

@inject NavigationManager NavigationManager
@inject IActiveWorkoutService ActiveWorkoutService
@inject IEditWorkoutTemplateUseCase EditWorkoutTemplateUseCase
@inject IDialogService DialogService

<PageTitle>@_viewModel?.Name</PageTitle>

@if (_viewModel != null)
{
    <ActiveWorkoutHeader WorkoutName="@_viewModel.Name"
                         OnWorkoutNameChanged="HandleWorkoutNameChange"
                         ExerciseDuration="@_exerciseDuration"
                         RestTimer="@_restTimer" />

    foreach (var exercise in _viewModel.Exercises)
    {
        <ActiveWorkoutExercise Exercise="exercise"
                               OnExerciseDeleted="HandleExerciseDeleted"
                               OnExerciseNameChanged="RecalculateEndWorkoutDisabled"
                               OnSetComplete="HandleSetComplete"
                               OnSetRest="HandleSetRest"/>
    }

    <br />

    <MudButton Variant="Variant.Text"
               Color="Color.Secondary"
               OnClick="EndWorkout"
               Disabled="IsEndWorkoutDisabled">
        End Workout
    </MudButton> 
}
else
{
    <MudText Typo="Typo.h5">No workout in progress.</MudText>

    <br />

    <MudButton Variant="Variant.Filled"
                Color="Color.Primary"
                Href="/workouts">
        Back to Workouts
    </MudButton>
}

@code {
    private WorkoutViewModel _viewModel;
    private Workout? _activeWorkout;
    private TimeSpan _exerciseDuration;
    private TimeSpan _restTimer;
    private CancellationTokenSource _exerciseTokenSource = new();
    private CancellationTokenSource _restTokenSource = new();
    private bool IsEndWorkoutDisabled;

    protected override async Task OnInitializedAsync()
    {
        _activeWorkout = await ActiveWorkoutService.GetActiveWorkoutAsync(1);
        InitializeViewModel(_activeWorkout);
        _ = ExerciseTimerLoop(); // Start the workout timer
    }

    private void InitializeViewModel(Workout? activeWorkout)
    {
        if (activeWorkout != null)
        {
            _viewModel = new WorkoutViewModel
                {
                    Id = _activeWorkout.Id,
                    UserId = _activeWorkout.UserId,
                    TemplateId = _activeWorkout.TemplateId,
                    Name = _activeWorkout.Name,
                    StartTime = _activeWorkout.StartTime,
                    EndTime = _activeWorkout.EndTime,
                    Exercises = _activeWorkout.Exercises.Select(e => new ExerciseViewModel
                    {
                        Id = e.Id,
                        WorkoutId = e.WorkoutId,
                        Name = e.Name,
                        RestTimerValue = e.RestTimerValue,
                        RestTimerUnit = e.RestTimerUnit,
                        Sets = e.Sets.Select(s => new ExerciseSetViewModel
                        {
                            Id = s.Id,
                            Reps = s.Reps,
                            Weight = s.Weight
                        }).ToList(),
                        Note = e.Note
                    }).ToList()
                };
        }
    }

    private void HandleWorkoutNameChange(string newName)
    {
        _viewModel.Name = newName;
        RecalculateEndWorkoutDisabled();

    }

    private void HandleExerciseDeleted(int exerciseId)
    {
        var exerciseToDelete = _viewModel.Exercises.FirstOrDefault(e => e.Id == exerciseId);
        if (exerciseToDelete != null)
        {
            _viewModel.Exercises.Remove(exerciseToDelete);
        }
        RecalculateEndWorkoutDisabled();
    }

    private void HandleSetComplete(int restTimerSecondsBetweenSets)
    {
        CancelRestTimer();
        _restTimer = TimeSpan.FromSeconds(restTimerSecondsBetweenSets);
        StartRestTimerLoop(); // Start rest timer loop
    }

    private void HandleSetRest()
    {
        _restTimer = TimeSpan.Zero;
        CancelRestTimer(); // Cancel rest timer if it was running
    }

    private void RecalculateEndWorkoutDisabled()
    {
        IsEndWorkoutDisabled = string.IsNullOrWhiteSpace(_viewModel.Name)
                         || _viewModel.Exercises.Any(e => string.IsNullOrWhiteSpace(e.Name));
    }

    private void AddSet(int exerciseIndex)
    {
        _viewModel.Exercises[exerciseIndex].Sets?.Add(new ExerciseSetViewModel
            {
                Id = _viewModel.Exercises[exerciseIndex].Sets.Any() ? _viewModel.Exercises[exerciseIndex].Sets.Max(s => s.Id) + 1 : 1,
                Reps = 10,
                Weight = 0
            });
    }

    private async Task<DialogResult> OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<ActiveWorkoutUpdateTemplateDialog>("Update Template", options);
        var result = await dialog.Result;

        return result;
    }

    private async Task EndWorkout()
    {
        CancelTimers();

        // Compare the Workout and WorkoutViewModel to determine if there are changes
        if (HasChanges(_activeWorkout, _viewModel))
        {
            var dialogResult = await OpenDialogAsync();

            if (!dialogResult.Canceled)
            {
                // Update the WorkoutTemplate with the changes from the WorkoutViewModel
                await UpdateWorkoutTemplateAsync(CreateWorkoutTemplateViewModelFromWorkoutViewModel(_viewModel));
            }
        }

        // Set the _activeWorkout values from the view model 
        _activeWorkout = CreateWorkoutFromWorkoutViewModel(_viewModel);

        // Save the active workout
        await ActiveWorkoutService.SaveActiveWorkoutAsync(_activeWorkout);

        // Reset view model and timers
        _viewModel = null;
        _exerciseDuration = TimeSpan.Zero;
        _restTimer = TimeSpan.Zero;

        // Navigate to workouts page
        NavigationManager.NavigateTo("/workouts");
    }

    private WorkoutTemplateViewModel CreateWorkoutTemplateViewModelFromWorkoutViewModel(WorkoutViewModel viewModel)
    {
        return new WorkoutTemplateViewModel
            {
                Id = viewModel.TemplateId,
                UserId = viewModel.UserId,
                Name = viewModel.Name,
                Exercises = viewModel.Exercises.Select(e => new ExerciseTemplateViewModel
                {
                    Id = e.Id,
                    WorkoutTemplateId = viewModel.TemplateId,
                    Name = e.Name,
                    RestTimerValue = e.RestTimerValue,
                    RestTimerUnit = e.RestTimerUnit,
                    Sets = e.Sets.Select(s => new ExerciseTemplateSetViewModel
                    {
                        Id = s.Id,
                        Reps = s.Reps,
                        Weight = s.Weight
                    }).ToList(),
                    Note = e.Note
                }).ToList()
            };
    }

    private Workout CreateWorkoutFromWorkoutViewModel(WorkoutViewModel viewModel)
    {
        return new Workout
            {
                Id = viewModel.Id,
                UserId = viewModel.UserId,
                TemplateId = viewModel.TemplateId,
                Name = viewModel.Name,
                StartTime = viewModel.StartTime,
                EndTime = viewModel.EndTime,
                Exercises = viewModel.Exercises.Select(e => new Exercise
                {
                    Id = e.Id,
                    WorkoutId = e.WorkoutId,
                    Name = e.Name,
                    RestTimerValue = e.RestTimerValue,
                    RestTimerUnit = e.RestTimerUnit,
                    Sets = e.Sets.Select(s => new ExerciseSet
                    {
                        Id = s.Id,
                        Reps = s.Reps,
                        Weight = s.Weight
                    }).ToList(),
                    Note = e.Note
                }).ToList()
            };
    }

    private async Task UpdateWorkoutTemplateAsync(WorkoutTemplateViewModel viewModel)
    {
        var workoutTemplate = new WorkoutTemplate
            {
                UserId = viewModel.UserId,
                Name = viewModel.Name,
                Exercises = viewModel.Exercises.Select(e => new ExerciseTemplate
                {
                    Id = e.Id,
                    WorkoutTemplateId = viewModel.Id,
                    Name = e.Name,
                    RestTimerValue = e.RestTimerValue,
                    RestTimerUnit = e.RestTimerUnit,
                    Sets = e.Sets.Select(s => new ExerciseTemplateSet
                    {
                        Id = s.Id,
                        Reps = s.Reps,
                        Weight = s.Weight
                    }).ToList(),
                    Note = e.Note
                }).ToList()
            };

        await EditWorkoutTemplateUseCase.ExecuteAsync(workoutTemplate);
    }

    private bool HasChanges(Workout activeWorkout, WorkoutViewModel viewModel)
    {
        // Compare the workout names
        if (viewModel.Name != activeWorkout.Name)
        {
            return true;
        }

        // Compare the number of exercises
        if (viewModel.Exercises.Count != activeWorkout.Exercises.Count)
        {
            return true;
        }

        // Compare each exercise and its sets
        for (int i = 0; i < viewModel.Exercises.Count; i++)
        {
            var exerciseViewModel = viewModel.Exercises[i];
            var correspondingActiveExercise = activeWorkout.Exercises[i];

            // Compare exercise names
            if (exerciseViewModel.Name != correspondingActiveExercise.Name)
            {
                return true;
            }

            // Compare the number of sets
            if (exerciseViewModel.Sets.Count != correspondingActiveExercise.Sets.Count)
            {
                return true;
            }

            // Compare the rest timer value
            if (exerciseViewModel.RestTimerSecondsBetweenSets != correspondingActiveExercise.RestTimerSecondsBetweenSets)
            {
                return true;
            }

            // Compare each set within the exercise
            // for (int j = 0; j < exerciseViewModel.Sets.Count; j++)
            // {
            //     var setViewModel = exerciseViewModel.Sets[j];
            //     var correspondingActiveSet = correspondingActiveExercise.Sets[j];

            //     // Compare reps and weight
            //     if (setViewModel.Reps != correspondingActiveSet.Reps || setViewModel.Weight != correspondingActiveSet.Weight)
            //     {
            //         return true;
            //     }
            // }
        }

        // No differences found
        return false;
    }

    private async Task ExerciseTimerLoop()
    {
        while (_viewModel != null && !_viewModel.IsCompleted && !_exerciseTokenSource.Token.IsCancellationRequested)
        {
            _exerciseDuration = DateTime.Now - _viewModel.StartTime;
            StateHasChanged();
            await Task.Delay(1000, _exerciseTokenSource.Token); // Update every second
        }
    }

    private void StartRestTimerLoop()
    {
        _restTokenSource = new CancellationTokenSource();
        _ = RestTimerLoop(); // Start rest timer loop
    }

    private async Task RestTimerLoop()
    {
        while (_restTimer.TotalSeconds > 0 && !_restTokenSource.Token.IsCancellationRequested)
        {
            await Task.Delay(1000, _restTokenSource.Token); // Wait first, then update
            _restTimer = _restTimer.Subtract(TimeSpan.FromSeconds(1));
            StateHasChanged();
        }

        _restTimer = TimeSpan.Zero;
        StateHasChanged();
    }

    private void CancelTimers()
    {
        _exerciseTokenSource.Cancel();
        _restTokenSource.Cancel();
        _exerciseTokenSource.Dispose();
        _restTokenSource.Dispose();
        _exerciseTokenSource = new CancellationTokenSource(); // Create a new one for future use
        _restTokenSource = new CancellationTokenSource(); // Create a new one for future use
    }

    private void CancelRestTimer()
    {
        _restTokenSource.Cancel();
        _restTokenSource.Dispose();
        _restTokenSource = new CancellationTokenSource(); // Create a new one for future use
    }
}