@page "/workout-in-progress"

@inject NavigationManager NavigationManager
@inject IGetActiveWorkoutUseCase GetActiveWorkoutUseCase
@inject IEndWorkoutUseCase EndWorkoutUseCase

<PageTitle>@_activeWorkout?.Name</PageTitle>

<MudCard Elevation="3" Class="mb-4">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="6">
                <MudText Typo="Typo.h6">@_activeWorkout?.Name</MudText>
            </MudItem>

            <MudItem xs="6" Class="d-flex justify-end align-center">

                <MudTooltip Text="Exercise Time">
                    <MudIcon Icon="@Icons.Material.Filled.Timer" />
                </MudTooltip>
                <div style="width:80px;">
                    <MudText Typo="Typo.body1" Class="ml-2">
                        @FormatTime(_exerciseDuration)
                    </MudText>
                </div>
            </MudItem>

        </MudGrid>
    </MudCardContent>
</MudCard>




@if (_activeWorkout == null)
{
    <MudText Typo="Typo.h5">No workout in progress.</MudText>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Href="/workouts">
            Back to Workouts
        </MudButton>
    </MudCardActions>
}
else
{
    @for (int i = 0; i < _exerciseViewModels.Count; i++)
    {
        var exerciseViewModel = _exerciseViewModels[i];

        <MudSimpleTable Dense Elevation="1" Class="mb-4">
            <thead>
                <tr>
                    <th width="300px">@exerciseViewModel.Exercise.Name</th>
                    <th>Reps</th>
                    <th>Weight</th>
                    <th style="padding:0px;"></th>
                    @* <th>Rest Timer</th> *@
                    <th>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                                 AriaLabel="Open workout options"
                                 AnchorOrigin="Origin.BottomCenter"
                                 TransformOrigin="Origin.TopCenter">
                            <MudMenuItem Icon="@Icons.Material.Filled.AddCircle"
                                         IconColor="Color.Success">
                                Add Set
                            </MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Delete"
                                         IconColor="Color.Error">
                                Delete Exercise
                            </MudMenuItem>
                        </MudMenu>
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int j = 0; j < exerciseViewModel.Sets.Count; j++)
                {
                    var setViewModel = exerciseViewModel.Sets[j];

                    <tr>
                        <td>@($"Set {j + 1}")</td>
                        <td>
                            <MudNumericField @bind-Value="setViewModel.ExerciseSet.Reps"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense" />
                        </td>
                        <td>
                            <MudNumericField @bind-Value="setViewModel.ExerciseSet.Weight"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense" />
                        </td>
                        <td>
                            @if (!setViewModel.IsCompleted)
                            {
                                <MudTooltip Text="Complete Set">
                                    <MudIconButton Icon="@Icons.Material.Outlined.CheckCircleOutline"
                                                   Color="Color.Dark"
                                                   Size="Size.Medium"
                                                   OnClick="() => CompleteSet(exerciseViewModel, setViewModel)" />
                                </MudTooltip>
                            }
                            else
                            {
                                <MudTooltip Text="Set Complete">
                                    <MudIconButton Icon="@Icons.Material.Outlined.CheckCircleOutline"
                                                   Color="Color.Success"
                                                   Size="Size.Medium"
                                                   OnClick="() => ResetSet(setViewModel)" />
                                </MudTooltip>
                            }
                        </td>
                        @* <td>
                            @if (setViewModel.IsCompleted && setViewModel.InitialRestTime > 0 && setViewModel.RemainingRestTime >= 0)
                            {
                                <MudText>@TimeSpan.FromSeconds(setViewModel.RemainingRestTime).ToString(@"mm\:ss")</MudText>
                            }
                        </td> *@
                        <td>
                            <MudTooltip Text="Delete Set">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               OnClick="() => DeleteSet(exerciseViewModel, setViewModel)" />
                            </MudTooltip>

                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }
}

<br />

<MudButton Variant="Variant.Text"
           Color="Color.Secondary"
           OnClick="EndWorkout">
    End Workout
</MudButton>

@code {
    private Workout? _activeWorkout;
    private TimeSpan _exerciseDuration;

    // List of ExerciseViewModels to hold persistent view models for each exercise
    private List<ExerciseViewModel> _exerciseViewModels = new();

    protected override async Task OnInitializedAsync()
    {
        _activeWorkout = await GetActiveWorkoutUseCase.ExecuteAsync();
        if (_activeWorkout != null)
        {
            // Initialize view models for exercises and sets
            foreach (var exercise in _activeWorkout.Exercises)
            {
                var exerciseViewModel = new ExerciseViewModel(exercise);
                _exerciseViewModels.Add(exerciseViewModel);
            }

            // Start the workout timer if a workout is in progress
            _ = ExerciseTimerLoop();
        }
    }

    private async Task EndWorkout()
    {
        if (_activeWorkout != null)
        {
            await EndWorkoutUseCase.ExecuteAsync(_activeWorkout.Id);
            _activeWorkout = null;
            _exerciseDuration = TimeSpan.Zero;
            NavigationManager.NavigateTo("/workouts");
        }
    }

    private void CompleteSet(ExerciseViewModel exerciseViewModel, ExerciseSetViewModel setViewModel)
    {
        setViewModel.MarkAsCompleted();

        if (exerciseViewModel.Exercise.InitialRestTimeBetweenSets > 0)
        {
            setViewModel.RemainingRestTime = exerciseViewModel.Exercise.InitialRestTimeBetweenSets;
            _ = RestTimerLoop(setViewModel); // Start rest timer
        }
    }

    private void ResetSet(ExerciseSetViewModel setViewModel)
    {
        setViewModel.ResetSet();
    }

    private void DeleteSet(ExerciseViewModel exerciseViewModel, ExerciseSetViewModel setViewModel)
    {
        exerciseViewModel.Sets.Remove(setViewModel);
        StateHasChanged(); // Notify the UI to update
    }

    private async Task ExerciseTimerLoop()
    {
        while (_activeWorkout != null && !_activeWorkout.IsCompleted)
        {
            _exerciseDuration = DateTime.Now - _activeWorkout.StartTime;
            StateHasChanged();
            await Task.Delay(1000); // Update every second
        }
    }

    private async Task RestTimerLoop(ExerciseSetViewModel setViewModel)
    {
        // Display initial time
        StateHasChanged();

        while (_activeWorkout != null && !_activeWorkout.IsCompleted && setViewModel.IsRestTimeActive())
        {
            await Task.Delay(1000); // Wait first, then update
            setViewModel.DecrementRestTime();
            StateHasChanged(); // Notify the UI to update
        }

        // Add a small delay after reaching 0
        await Task.Delay(1000);

        setViewModel.DecrementRestTime(); // Set to -1 to hide the timer
        StateHasChanged(); // Final UI update
    }

    private string FormatTime(TimeSpan time)
    {
        var hours = time.Hours;
        var minutes = time.Minutes;
        var seconds = time.Seconds;

        var timeParts = new List<string>();

        if (hours > 0)
        {
            timeParts.Add($"{hours}h");
        }
        if (minutes > 0 || hours > 0) // Show minutes if there are any or hours are present
        {
            timeParts.Add($"{minutes}m");
        }
        if (seconds > 0 || timeParts.Count == 0) // Always show seconds if no other units are present
        {
            timeParts.Add($"{seconds}s");
        }

        return string.Join(" ", timeParts);
    }
}