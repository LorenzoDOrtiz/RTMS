@page "/workout-in-progress"

@inject NavigationManager NavigationManager
@inject IActiveWorkoutService ActiveWorkoutService

<PageTitle>@_viewModel?.Name</PageTitle>

@if (_viewModel != null)
{
    <MudCard Elevation="3" Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="6">
                    <MudText Typo="Typo.h6">@_viewModel?.Name</MudText>
                </MudItem>

                <MudItem xs="6" Class="d-flex justify-end align-center">
                    <div style="margin-left: auto; display: flex;">
                        <div style="display: flex; align-items: center; padding: 5px; margin-left: 5px;">
                            <MudIcon Icon="@Icons.Material.Filled.AccessTimeFilled" Color="Color.Dark" />
                            <MudText Typo="Typo.subtitle2" Class="ml-2">@FormatTime(_exerciseDuration)</MudText>
                        </div>
                        @if (_restTimer > TimeSpan.Zero)
                        {
                            <div style="display: flex; align-items: center; border-radius: 50px; padding: 5px; margin-left: 5px;">
                                <MudIcon Icon="@Icons.Material.Filled.Timer" Color="Color.Info" />
                                <MudText Typo="Typo.subtitle2" Class="ml-2">@FormatTime(_restTimer)</MudText>
                            </div>
                        }
                    </div>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    @for (int i = 0; i < _viewModel.Exercises.Count; i++)
    {
        var exerciseViewModel = _viewModel.Exercises[i];

        <MudSimpleTable Dense Elevation="1" Class="mb-4">
            <thead>
                <tr>
                    <th width="300px">@exerciseViewModel.Name</th>
                    <th>Reps</th>
                    <th>Weight</th>
                    <th style="padding:0px;"></th>
                    <th>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                                 AriaLabel="Open workout options"
                                 AnchorOrigin="Origin.BottomCenter"
                                 TransformOrigin="Origin.TopCenter">
                            <MudMenuItem Icon="@Icons.Material.Filled.AddCircle"
                                         IconColor="Color.Success">
                                Add Set
                            </MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Delete"
                                         IconColor="Color.Error">
                                Delete Exercise
                            </MudMenuItem>
                        </MudMenu>
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int j = 0; j < exerciseViewModel.Sets.Count; j++)
                {
                    var setViewModel = exerciseViewModel.Sets[j];

                    <tr>
                        <td>@($"Set {j + 1}")</td>
                        <td>
                            <MudNumericField @bind-Value="setViewModel.Reps"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense" />
                        </td>
                        <td>
                            <MudNumericField @bind-Value="setViewModel.Weight"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense" />
                        </td>
                        <td>
                            @if (!setViewModel.IsCompleted)
                            {
                                <MudTooltip Text="Complete Set">
                                    <MudIconButton Icon="@Icons.Material.Outlined.CheckCircleOutline"
                                                   Color="Color.Dark"
                                                   Size="Size.Medium"
                                                   OnClick="() => CompleteSet(exerciseViewModel, setViewModel)" />
                                </MudTooltip>
                            }
                            else
                            {
                                <MudTooltip Text="Set Complete">
                                    <MudIconButton Icon="@Icons.Material.Outlined.CheckCircleOutline"
                                                   Color="Color.Success"
                                                   Size="Size.Medium"
                                                   OnClick="() => ResetSet(setViewModel)" />
                                </MudTooltip>
                            }
                        </td>
                        <td>
                            <MudTooltip Text="Delete Set">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               OnClick="() => DeleteSet(exerciseViewModel, setViewModel)" />
                            </MudTooltip>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }

    <br />

    <MudButton Variant="Variant.Text"
               Color="Color.Secondary"
               OnClick="EndWorkout">
        End Workout
    </MudButton>
}
else
{
    <MudText Typo="Typo.h5">No workout in progress.</MudText>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Href="/workouts">
            Back to Workouts
        </MudButton>
    </MudCardActions>
}

@code {
    private WorkoutViewModel? _viewModel;
    private Workout? _activeWorkout;
    private TimeSpan _exerciseDuration;
    private TimeSpan _restTimer;
    private CancellationTokenSource _exerciseTokenSource = new();
    private CancellationTokenSource _restTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        _activeWorkout = await ActiveWorkoutService.GetActiveWorkoutAsync(1);
        InitializeViewModel(_activeWorkout);
        _ = ExerciseTimerLoop(); // Start the workout timer
    }

    private void InitializeViewModel(Workout? activeWorkout)
    {
        if (activeWorkout != null)
        {
            _viewModel = new WorkoutViewModel
                {
                    Id = _activeWorkout.Id,
                    UserId = _activeWorkout.UserId,
                    TemplateId = _activeWorkout.TemplateId,
                    Name = _activeWorkout.Name,
                    StartTime = _activeWorkout.StartTime,
                    EndTime = _activeWorkout.EndTime,
                    Exercises = _activeWorkout.Exercises.Select(e => new ExerciseViewModel
                    {
                        Id = e.Id,
                        WorkoutId = e.WorkoutId,
                        Name = e.Name,
                        RestTimerValue = e.RestTimerValue,
                        RestTimerUnit = e.RestTimerUnit,
                        Sets = e.Sets.Select(s => new ExerciseSetViewModel
                        {
                            Id = s.Id,
                            Reps = s.Reps,
                            Weight = s.Weight
                        }).ToList(),
                        Note = e.Note
                    }).ToList()
                };
        }
    }

    private async Task EndWorkout()
    {
        CancelTimers();
        await ActiveWorkoutService.EndWorkoutAsync(1);
        _viewModel = null;
        _exerciseDuration = TimeSpan.Zero;
        _restTimer = TimeSpan.Zero;
        NavigationManager.NavigateTo("/workouts");
    }

    private void CompleteSet(ExerciseViewModel exerciseViewModel, ExerciseSetViewModel setViewModel)
    {
        setViewModel.MarkAsCompleted();

        if (exerciseViewModel.RestTimerSecondsBetweenSets > 0)
        {
            CancelRestTimer();
            _restTimer = TimeSpan.FromSeconds(exerciseViewModel.RestTimerSecondsBetweenSets);
            StartRestTimerLoop(); // Start rest timer loop
        }
    }

    private void ResetSet(ExerciseSetViewModel setViewModel)
    {
        setViewModel.ResetSet();
        _restTimer = TimeSpan.Zero;
        CancelRestTimer(); // Cancel rest timer if it was running
    }

    private void DeleteSet(ExerciseViewModel exerciseViewModel, ExerciseSetViewModel setViewModel)
    {
        exerciseViewModel.Sets.Remove(setViewModel);
        StateHasChanged(); // Notify the UI to update
    }

    private async Task ExerciseTimerLoop()
    {
        while (_viewModel != null && !_viewModel.IsCompleted && !_exerciseTokenSource.Token.IsCancellationRequested)
        {
            _exerciseDuration = DateTime.Now - _viewModel.StartTime;
            StateHasChanged();
            await Task.Delay(1000, _exerciseTokenSource.Token); // Update every second
        }
    }

    private void StartRestTimerLoop()
    {
        _restTokenSource = new CancellationTokenSource();
        _ = RestTimerLoop(); // Start rest timer loop
    }

    private async Task RestTimerLoop()
    {
        while (_restTimer.TotalSeconds > 0 && !_restTokenSource.Token.IsCancellationRequested)
        {
            await Task.Delay(1000, _restTokenSource.Token); // Wait first, then update
            _restTimer = _restTimer.Subtract(TimeSpan.FromSeconds(1));
            StateHasChanged();
        }

        _restTimer = TimeSpan.Zero;
        StateHasChanged();
    }

    private void CancelTimers()
    {
        _exerciseTokenSource.Cancel();
        _restTokenSource.Cancel();
        _exerciseTokenSource.Dispose();
        _restTokenSource.Dispose();
        _exerciseTokenSource = new CancellationTokenSource(); // Create a new one for future use
        _restTokenSource = new CancellationTokenSource(); // Create a new one for future use
    }

    private void CancelRestTimer()
    {
        _restTokenSource.Cancel();
        _restTokenSource.Dispose();
        _restTokenSource = new CancellationTokenSource(); // Create a new one for future use
    }

    private string FormatTime(TimeSpan time)
    {
        return time.ToString(@"hh\:mm\:ss");
    }
}