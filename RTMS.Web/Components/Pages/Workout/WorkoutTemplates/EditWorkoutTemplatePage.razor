@page "/workouts/edit-workout-template/{Id:int}"

@inject IViewWorkoutTemplateUseCase ViewWorkoutUseCase
@inject IEditWorkoutTemplateUseCase EditWorkoutUseCase
@inject NavigationManager NavigationManager

<PageTitle>Edit Workout</PageTitle>

<MudStack Spacing="4">
    <WorkoutTemplateHeader WorkoutName="@workoutTemplate.Name"
                           OnWorkoutNameChanged="HandleWorkoutNameChange" />

    @if (workoutTemplate.Exercises != null && workoutTemplate.Exercises.Any())
    {
        foreach (var exercise in workoutTemplate.Exercises)
        {
            <WorkoutTemplateExercise Exercise="exercise"
                                     OnExerciseDeleted="HandleExerciseDeleted" />
        }
    }

    <MudGrid>
        <MudItem>
            @if (workoutTemplate.Exercises.Any())
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           OnClick="ValidateAndSave"
                           Class="mr-4">
                    Save Workout
                </MudButton>
            }
            <MudButton Href="/workouts"
                       Variant="Variant.Text"
                       Color="Color.Error">
                Cancel
            </MudButton>
        </MudItem>
        <MudItem Class="ml-auto">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Info"
                       OnClick="AddExercise">
                Add Exercise
            </MudButton>
        </MudItem>
    </MudGrid>
</MudStack>

@code {
    [Parameter]
    public int Id { get; set; }

    private WorkoutTemplate workoutTemplate;

    protected override async Task OnInitializedAsync()
    {
        // Use the Id to fetch the workout details and populate the form
        workoutTemplate = await ViewWorkoutUseCase.ExecuteAsync(Id);
    }

    private void AddExercise()
    {
        workoutTemplate.Exercises.Add(new ExerciseTemplate
            {
                Id = workoutTemplate.Exercises.Any() ? workoutTemplate.Exercises.Max(w => w.Id) + 1 : 1,
                WorkoutTemplateId = workoutTemplate.Id,
                Name = "",
                Sets = new List<ExerciseTemplateSet>() // Initialize with an empty list
            {
                new ExerciseTemplateSet { Reps = 10, Weight = 0 }
            }
            });
    }

    private void HandleWorkoutNameChange(string newName)
    {
        workoutTemplate.Name = newName;
    }

    private void HandleExerciseDeleted(int exerciseId)
    {
        var exerciseToDelete = workoutTemplate.Exercises.FirstOrDefault(e => e.Id == exerciseId);

        if (exerciseToDelete != null)
        {
            workoutTemplate.Exercises.Remove(exerciseToDelete);
        }
    }



    private void DeleteExercise(int exerciseIndex)
    {
        if (exerciseIndex >= 0 && exerciseIndex < workoutTemplate.Exercises.Count)
        {
            workoutTemplate.Exercises.RemoveAt(exerciseIndex);
        }
    }

    private void SetRestTimer(ExerciseTemplate exercise, int exerciseIndex)
    {
        int durationInSeconds = exercise.RestTimerUnit == "minutes" ? exercise.RestTimerValue * 60 : exercise.RestTimerValue;

        if (durationInSeconds != 0)
        {
            workoutTemplate.Exercises[exerciseIndex].RestTimeBetweenSets = durationInSeconds;
        }
        exercise.IsRestTimerOpen = false;
    }

    private void AddSet(int exerciseIndex)
    {
        if (exerciseIndex >= 0 && exerciseIndex < workoutTemplate.Exercises.Count)
        {
            workoutTemplate.Exercises[exerciseIndex].Sets?.Add(new ExerciseTemplateSet { Reps = 10, Weight = 0 });
        }
    }

    private void DeleteSet(int exerciseIndex, int setIndex)
    {
        if (exerciseIndex >= 0 && setIndex >= 0 && workoutTemplate.Exercises[exerciseIndex].Sets.Count > 0)
        {
            workoutTemplate.Exercises[exerciseIndex].Sets.RemoveAt(setIndex);
        }
    }

    private async Task SaveWorkout()
    {
        if (workoutTemplate is not null)
        {
            await EditWorkoutUseCase.ExecuteAsync(workoutTemplate);
            NavigationManager.NavigateTo("/workouts");
        }
    }

    private async Task ValidateAndSave()
    {
        // Perform manual validation
        var validationResults = new List<ValidationResult>();
        var context = new ValidationContext(workoutTemplate, null, null);
        bool isValid = Validator.TryValidateObject(workoutTemplate, context, validationResults, true);

        if (isValid)
        {
            // Call SaveWorkout if validation passes
            await SaveWorkout();
        }
        else
        {
            // Handle validation errors (e.g., display errors)
            foreach (var error in validationResults)
            {
                Console.WriteLine(error.ErrorMessage); // Or use MudBlazor components to display errors
            }
        }
    }
}