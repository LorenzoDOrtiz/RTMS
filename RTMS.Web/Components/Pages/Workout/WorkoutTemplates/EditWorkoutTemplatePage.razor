@page "/workouts/edit-workout-template/{Id:int}"

@inject IViewWorkoutTemplateUseCase ViewWorkoutUseCase
@inject IEditWorkoutTemplateUseCase EditWorkoutUseCase
@inject NavigationManager NavigationManager

<PageTitle>Edit Workout</PageTitle>

<MudCard>
    <WorkoutTemplateHeader WorkoutName="@workoutTemplate.Name"
                           OnWorkoutNameChange="HandleWorkoutNameChange" />

    <MudCardContent>

        @for (int i = 0; i < workoutTemplate.Exercises.Count; i++)
        {
            int exerciseIndex = i;
            var exercise = workoutTemplate.Exercises[exerciseIndex];

            <MudCard Elevation="0">
                <MudCardContent>
                    <MudSimpleTable Dense Elevation="3">
                        <thead>
                            <tr>
                                <th>
                                    <MudTextField @bind-Value="workoutTemplate.Exercises[exerciseIndex].Name" 
                                                  Label="Exercise Name" 
                                                  Variant="Variant.Filled" 
                                                  Margin="Margin.Dense" 
                                                  AutoFocus />
                                </th>
                                <th>Reps</th>
                                <th>Weight</th>
                                <th>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                                             AriaLabel="Open workout options"
                                             AnchorOrigin="Origin.BottomCenter"
                                             TransformOrigin="Origin.TopCenter" >

                                        <MudMenuItem OnClick="() => AddSet(exerciseIndex)" 
                                                     Icon="@Icons.Material.Filled.AddCircle" 
                                                     IconColor="Color.Success">
                                                     Add Set
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => @exercise.IsRestTimerOpen = true)"
                                                     Icon="@Icons.Material.Filled.Timer"
                                                     IconColor="Color.Secondary">
                                                     Rest Timer
                                        </MudMenuItem>
                                        <MudMenuItem Icon="@Icons.Material.Filled.Note" 
                                                     IconColor="Color.Tertiary">
                                                     Note
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="() => DeleteExercise(exerciseIndex)" 
                                                     Icon="@Icons.Material.Filled.Delete" 
                                                     IconColor="Color.Error">
                                                     Delete Exercise
                                        </MudMenuItem>
                                    </MudMenu>
                                    <MudPopover Open="@exercise.IsRestTimerOpen" Class="px-4 pt-2 pb-2">
                                        <MudText Typo="Typo.body1" Class="mb-2">Set Rest Timer</MudText>
                                        <MudGrid>
                                            <MudItem xs="6">
                                                <MudNumericField @bind-Value="exercise.RestTimerValue"
                                                                 Label="Duration"
                                                                 Variant="Variant.Filled"
                                                                 Min="1"
                                                                 Max="@(exercise.RestTimerUnit == "minutes" ? 60 : 3600)"
                                                                 Margin="Margin.Dense" />
                                            </MudItem>
                                            <MudItem xs="6">
                                                <MudSelect T="string"
                                                           @bind-Value="exercise.RestTimerUnit"
                                                           Label="Unit"
                                                           Variant="Variant.Filled"
                                                           Margin="Margin.Dense"
                                                           Dense>
                                                    <MudSelectItem Value="@("seconds")">Seconds</MudSelectItem>
                                                    <MudSelectItem Value="@("minutes")">Minutes</MudSelectItem>
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid Justify="Justify.FlexEnd" Class="mt-0">
                                            <MudItem>
                                                <MudButton Color="Color.Error"
                                                           OnClick="@(() => exercise.IsRestTimerOpen = false)"
                                                           Class="mr-2"
                                                           Variant="Variant.Text">
                                                    Cancel
                                                </MudButton>
                                                <MudButton Color="Color.Success"
                                                           OnClick="@(() => SetRestTimer(exercise, exerciseIndex))"
                                                           Variant="Variant.Filled">
                                                    Set Timer
                                                </MudButton>
                                            </MudItem>
                                        </MudGrid>
                                    </MudPopover>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (exercise.Sets != null && exercise.Sets.Any())
                            {
                                @for (int j = 0; j < exercise.Sets.Count; j++)
                                {
                                    var setIndex = j;
                                    var set = exercise.Sets[setIndex];

                                    <tr>
                                        <td>@($"Set {j + 1}")</td>
                                        <td>
                                            <MudNumericField @bind-Value="set.Reps" 
                                                             Variant="Variant.Outlined" 
                                                             Margin="Margin.Dense" />
                                        </td>
                                        <td>
                                            <MudNumericField @bind-Value="set.Weight"
                                                             Variant="Variant.Outlined"
                                                             Margin="Margin.Dense" />
                                        </td>
                                        <td>
                                            <MudTooltip Text="Delete Set">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                               Color="Color.Error"
                                                               OnClick="() => DeleteSet(exerciseIndex, setIndex)" />
                                            </MudTooltip>
                                            
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudCardContent>
            </MudCard>
        }

        <MudCardActions>
            <MudGrid>
                <MudItem>
                    @if (workoutTemplate.Exercises.Any())
                    {
                        <MudButton Variant="Variant.Filled" 
                                Color="Color.Success" 
                                OnClick="ValidateAndSave" 
                                Class="mr-4">
                                Save Workout
                        </MudButton>
                    }
                    <MudButton Href="/workouts" 
                               Variant="Variant.Text"
                               Color="Color.Error">
                               Cancel
                    </MudButton>
                </MudItem>
                <MudItem Class="ml-auto">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Info" 
                               OnClick="AddExercise">
                               Add Exercise
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardActions>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public int Id { get; set; }

    private WorkoutTemplate workoutTemplate;

    protected override async Task OnInitializedAsync()
    {
        // Use the Id to fetch the workout details and populate the form
        workoutTemplate = await ViewWorkoutUseCase.ExecuteAsync(Id);
    }

    private void HandleWorkoutNameChange(string newName)
    {
        workoutTemplate.Name = newName;
    }

    private void AddExercise()
    {
        workoutTemplate.Exercises.Add(new ExerciseTemplate
            {
                Name = "",
                Sets = new List<ExerciseTemplateSet>() // Initialize with an empty list
            {
                new ExerciseTemplateSet { Reps = 10, Weight = 0 }
            }
            });
    }

    private void DeleteExercise(int exerciseIndex)
    {
        if (exerciseIndex >= 0 && exerciseIndex < workoutTemplate.Exercises.Count)
        {
            workoutTemplate.Exercises.RemoveAt(exerciseIndex);
        }
    }

    private void SetRestTimer(ExerciseTemplate exercise, int exerciseIndex)
    {
        int durationInSeconds = exercise.RestTimerUnit == "minutes" ? exercise.RestTimerValue * 60 : exercise.RestTimerValue;

        if (durationInSeconds != 0)
        {
            workoutTemplate.Exercises[exerciseIndex].RestTimeBetweenSets = durationInSeconds;
        }
        exercise.IsRestTimerOpen = false;
    }

    private void AddSet(int exerciseIndex)
    {
        if (exerciseIndex >= 0 && exerciseIndex < workoutTemplate.Exercises.Count)
        {
            workoutTemplate.Exercises[exerciseIndex].Sets?.Add(new ExerciseTemplateSet { Reps = 10, Weight = 0 });
        }
    }

    private void DeleteSet(int exerciseIndex, int setIndex)
    {
        if (exerciseIndex >= 0 && setIndex >= 0 && workoutTemplate.Exercises[exerciseIndex].Sets.Count > 0)
        {
            workoutTemplate.Exercises[exerciseIndex].Sets.RemoveAt(setIndex);
        }
    }

    private async Task SaveWorkout()
    {
        if (workoutTemplate is not null)
        {
            await EditWorkoutUseCase.ExecuteAsync(workoutTemplate);
            NavigationManager.NavigateTo("/workouts");
        }
    }

    private async Task ValidateAndSave()
    {
        // Perform manual validation
        var validationResults = new List<ValidationResult>();
        var context = new ValidationContext(workoutTemplate, null, null);
        bool isValid = Validator.TryValidateObject(workoutTemplate, context, validationResults, true);

        if (isValid)
        {
            // Call SaveWorkout if validation passes
            await SaveWorkout();
        }
        else
        {
            // Handle validation errors (e.g., display errors)
            foreach (var error in validationResults)
            {
                Console.WriteLine(error.ErrorMessage); // Or use MudBlazor components to display errors
            }
        }
    }
}