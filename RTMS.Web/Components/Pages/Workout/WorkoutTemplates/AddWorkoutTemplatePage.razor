@page "/workouts/add-workout-template"

@inject IAddWorkoutTemplateUseCase AddWorkoutUseCase
@inject NavigationManager NavigationManager

<PageTitle>Add Workout</PageTitle>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudTextField @bind-Value="workoutTemplate.Name" Label="Workout Template Name" Variant="Variant.Outlined" Margin="Margin.Dense" AutoFocus />
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        @if (workoutTemplate.Exercises != null && workoutTemplate.Exercises.Any())
        {
            for (int i = 0; i < workoutTemplate.Exercises.Count; i++)
            {
                var exerciseIndex = i; // Capture the loop variable in a local variable
                var exercise = workoutTemplate.Exercises[exerciseIndex];


                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudSimpleTable Dense Elevation="3">
                            <thead>
                                <tr>
                                    <th>
                                        <MudTextField @bind-Value="exercise.Name" Label="Exercise Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                    </th>
                                    <th>Reps</th>
                                    <th>Weight</th>
                                    <th>

                                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open workout options">
                                            <MudMenuItem OnClick="() => AddSet(exerciseIndex)" Icon="@Icons.Material.Filled.AddCircle" IconColor="Color.Success">Add Set</MudMenuItem>
                                            <MudMenuItem Icon="@Icons.Material.Filled.Timer" IconColor="Color.Secondary">Rest Timer</MudMenuItem>
                                            <MudMenuItem OnClick="() => DeleteExercise(exerciseIndex)" Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error">Delete Exercise</MudMenuItem>
                                        </MudMenu>

                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (exercise.Sets != null && exercise.Sets.Any())
                                {
                                    @for (int j = 0; j < exercise.Sets.Count; j++)
                                    {
                                        var setIndex = j;
                                        var set = exercise.Sets[setIndex];

                                        <tr>
                                            <td>@($"Set {j + 1}")</td>
                                            <td><MudNumericField @bind-Value="set.Reps" Variant="Variant.Outlined" Margin="Margin.Dense"></MudNumericField></td>
                                            <td><MudNumericField @bind-Value="set.Weight" Variant="Variant.Outlined" Margin="Margin.Dense"></MudNumericField></td>
                                            <td><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteSet(exerciseIndex, setIndex)"></MudIconButton></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudCardContent>
                </MudCard>
            }
        }
        <MudCardActions>
            <MudGrid>
                <MudItem>
                    @if (workoutTemplate.Exercises.Any())
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ValidateAndSave" Class="mr-4">Save Workout</MudButton>
                    }
                    <MudButton Href="/workouts" Variant="Variant.Filled" Color="Color.Error">Cancel</MudButton>
                </MudItem>
                <MudItem Class="ml-auto">
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="AddExercise">Add Exercise</MudButton>
                </MudItem>
            </MudGrid>
        </MudCardActions>
    </MudCardContent>
</MudCard>

@code {
    private WorkoutTemplate workoutTemplate = new();

    private void AddExercise()
    {
        workoutTemplate.Exercises.Add(new ExerciseTemplate
            {
                Name = "",
                Sets = new List<ExerciseTemplateSet>() // Initialize with an empty list
            {
                new ExerciseTemplateSet { Reps = 10, Weight = 0 }
            }
            });
    }

    private void DeleteExercise(int exerciseIndex)
    {
        if (exerciseIndex >= 0 && exerciseIndex < workoutTemplate.Exercises.Count)
        {
            workoutTemplate.Exercises.RemoveAt(exerciseIndex);
        }
    }

    private void AddSet(int exerciseIndex)
    {
        if (exerciseIndex >= 0 && exerciseIndex < workoutTemplate.Exercises.Count)
        {
            workoutTemplate.Exercises[exerciseIndex].Sets?.Add(new ExerciseTemplateSet { Reps = 10, Weight = 0 });
        }
    }

    private void DeleteSet(int exerciseIndex, int setIndex)
    {
        if (exerciseIndex >= 0 && setIndex >= 0 && workoutTemplate.Exercises[exerciseIndex].Sets.Count > 0)
        {
            workoutTemplate.Exercises[exerciseIndex].Sets.RemoveAt(setIndex);
        }
    }

    private async Task SaveWorkout()
    {
        await AddWorkoutUseCase.ExecuteAsync(workoutTemplate);
        NavigationManager.NavigateTo("/workouts");
    }

    private async Task ValidateAndSave()
    {
        // Perform manual validation
        var validationResults = new List<ValidationResult>();
        var context = new ValidationContext(workoutTemplate, null, null);
        bool isValid = Validator.TryValidateObject(workoutTemplate, context, validationResults, true);

        if (isValid)
        {
            // Call SaveWorkout if validation passes
            await SaveWorkout();
        }
        else
        {
            // Handle validation errors (e.g., display errors)
            foreach (var error in validationResults)
            {
                Console.WriteLine(error.ErrorMessage); // Or use MudBlazor components to display errors
            }
        }
    }
}
