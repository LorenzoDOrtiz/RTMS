@page "/workout-in-progress/{Id:int}"

@attribute [Authorize]

@* need to move the method used from this into it's own use case later *@
@inject IAddWorkoutUseCase AddWorkoutUseCase
@implements IDisposable
@inject IViewActiveWorkoutByWorkoutAndUserIdUseCase ViewActiveWorkoutByWorkoutAndUserIdUseCase
@inject IEditWorkoutTemplateUseCase EditWorkoutTemplateUseCase
@inject IEndWorkoutUseCase EndWorkoutUseCase
@inject IViewWorkoutTemplateByIdUseCase ViewWorkoutTemplateByIdUseCase
@inject IDialogService DialogService
@inject IMapper Mapper
@inject ILocalStorageService LocalStorage
@inject UserContextService UserContextService
@inject RestTimerService RestTimerService
@inject NavigationManager NavigationManager
@inject ActiveWorkoutService ActiveWorkoutService
<PageTitle>@_workoutViewModel?.Name</PageTitle>

@if (_workoutViewModel != null)
{
    <ActiveWorkoutHeader ViewModel="_workoutViewModel"
                         OnExerciseAdded="HandleExerciseAdded" />

    foreach (var exercise in _workoutViewModel.Exercises)
    {
        <ActiveWorkoutExercise Exercise="exercise"
                               OnExerciseDeleted="HandleExerciseDeleted"
                               OnExerciseNameChanged="RecalculateEndWorkoutDisabled"
                               OnSetComplete="HandleSetComplete"
                               OnSetReset="HandleSetReset" />
    }

    <br />

    <MudButton Variant="Variant.Text"
               Color="Color.Secondary"
               OnClick="EndWorkout"
               Disabled="IsEndWorkoutDisabled">
        End Workout
    </MudButton>
}
else
{
    <MudText Typo="Typo.h5">No workout in progress.</MudText>

    <br />

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Href="/workouts">
        Back to Workouts
    </MudButton>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private WorkoutViewModel? _workoutViewModel;
    private Workout? _workout;

    private bool IsEndWorkoutDisabled;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_workoutViewModel == null)
        {
            // Try to load from local storage first
            await LoadStateFromLocalStorage();

            // If local storage is empty, then hit the database
            if (_workoutViewModel == null)
            {
                var userId = await UserContextService.GetUserIdAsync();
                var workout = await ViewActiveWorkoutByWorkoutAndUserIdUseCase.ExecuteAsync(Id, userId);
                _workoutViewModel = Mapper.Map<WorkoutViewModel>(workout);
            }
        }
    }

    private async Task LoadStateFromLocalStorage()
    {
        var serialized = await LocalStorage.GetItemAsync<string>("activeWorkout");
        if (serialized != null)
        {
            _workoutViewModel = JsonSerializer.Deserialize<WorkoutViewModel>(serialized);
        }
    }

    private async Task SaveStateToLocalStorage()
    {
        if (_workoutViewModel != null)
        {
            var serialized = JsonSerializer.Serialize(_workoutViewModel);
            await LocalStorage.SetItemAsync("activeWorkout", serialized);
        }
    }

    // When the user navigates to another page, we will update their workout in the database
    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (_workoutViewModel != null)
        {
            await SaveWorkoutProgress();
        }
    }

    private async Task SaveWorkoutProgress()
    {
        if (_workoutViewModel != null)
        {
            // Save the workout progress to the database
            var workoutToSave = Mapper.Map<Workout>(_workoutViewModel);
            await AddWorkoutUseCase.SaveWorkoutProgressAsync(workoutToSave);
        }
    }

    public void Dispose()
    {
        // Unsubscribe from navigation events to prevent memory leaks
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async void HandleWorkoutNameChange(string newName)
    {
        _workoutViewModel.Name = newName;
        RecalculateEndWorkoutDisabled();
        await SaveStateToLocalStorage();
    }

    private async void HandleExerciseAdded()
    {
        _workoutViewModel.Exercises.Add(new ExerciseViewModel
            {
                WorkoutId = _workoutViewModel.Id,
                Sets = new()
            });
        RecalculateEndWorkoutDisabled();
        await SaveStateToLocalStorage(); // Save changes
    }

    private async void HandleExerciseDeleted(int exerciseId)
    {
        var exerciseToDelete = _workoutViewModel.Exercises.FirstOrDefault(e => e.Id == exerciseId);
        if (exerciseToDelete != null)
        {
            _workoutViewModel.Exercises.Remove(exerciseToDelete);
        }
        RecalculateEndWorkoutDisabled();
        await SaveStateToLocalStorage(); // Save changes
    }

    private async void HandleSetComplete(int restTimerSecondsBetweenSets)
    {
        RestTimerService.StartTimer(restTimerSecondsBetweenSets);
        await SaveStateToLocalStorage(); // Save changes
    }

    private async void HandleSetReset()
    {
        RestTimerService.StopTimer();
        await SaveStateToLocalStorage(); // Save changes
    }

    private void RecalculateEndWorkoutDisabled()
    {
        IsEndWorkoutDisabled = string.IsNullOrWhiteSpace(_workoutViewModel.Name)
                         || _workoutViewModel.Exercises.Any(e => string.IsNullOrWhiteSpace(e.Name));
    }

    private async Task<DialogResult> OpenDialogAsync()
    {
        var dialog = DialogService.Show<ActiveWorkoutUpdateTemplateDialog>("Update Workout Template?");
        var result = await dialog.Result;

        return result;
    }

    private bool WorkoutTemplateDiffersFromWorkout(WorkoutTemplate workoutTemplate, Workout workout)
    {
        if (workoutTemplate.Name != workout.Name)
        {
            return true; // Names differ
        }

        if (workoutTemplate.Exercises.Count != workout.Exercises.Count)
        {
            return true; // Different number of exercises
        }

        // Create dictionaries to compare exercises by exercise template Id
        var workoutExercisesById = workout.Exercises.ToDictionary(e => e.ExerciseTemplateId);
        var templateExercisesById = workoutTemplate.Exercises.ToDictionary(e => e.Id);

        foreach (var exerciseTemplate in workoutTemplate.Exercises)
        {
            if (!workoutExercisesById.TryGetValue(exerciseTemplate.Id, out var matchingExercise))
            {
                return true; // Exercise not found in the workout
            }

            if (exerciseTemplate.Name != matchingExercise.Name || exerciseTemplate.Sets.Count != matchingExercise.Sets.Count)
            {
                return true; // Exercise properties differ
            }
        }

        // All properties match, no changes
        return false;
    }

    private async Task EndWorkout()
    {
        var _workoutTemplate = await ViewWorkoutTemplateByIdUseCase.ExecuteAsync(_workoutViewModel.WorkoutTemplateId);

        _workout = Mapper.Map<Workout>(_workoutViewModel);

        // Check if changes are present
        var changesPresent = !WorkoutTemplateDiffersFromWorkout(_workoutTemplate, _workout);

        if (changesPresent)
        {
            var dialogResult = await OpenDialogAsync();

            if (!dialogResult.Canceled)
            {
                // Update the WorkoutTemplate with the changes from the WorkoutViewModel
                _workoutTemplate = Mapper.Map<WorkoutTemplate>(_workout);

                await EditWorkoutTemplateUseCase.ExecuteAsync(_workoutTemplate);
            }
        }

        // Save the active workout
        await EndWorkoutUseCase.ExecuteAsync(_workout);

        // Clear local storage before resetting
        await LocalStorage.RemoveItemAsync("activeWorkout");

        ActiveWorkoutService.ActiveWorkout = null; 

        // Reset view model
        _workoutViewModel = null;

        // Navigate to workouts page
        NavigationManager.NavigateTo("/workouts");
    }
}