@page "/add-user"
@attribute [Authorize(Roles = "Trainer, Admin")]
@inject IAddTrainerClientRelationshipUseCase AddTrainerClientRelationshipUseCase
@inject IGetUserIdByAuth0IdUseCase GetUserIdByAuth0IdUseCase
@inject IGetUserIdsByAuth0IdsUseCase GetUserIdsByAuth0IdsUseCase
@inject Auth0UserService Auth0UserService
@inject NavigationManager NavigationManager
@inject UserService UserService
<PageTitle>Add User</PageTitle>

<MudContainer>
    <MudForm @bind-IsValid="@validForm">
        <MudStack Spacing="3" Style="width: 300px;">
            <MudTextField @bind-Value="firstName" Label="First Name" Placeholder="Enter user first name" AutoFocus Required OnlyValidateIfDirty Validation="ValidateFirstName" />
            <MudTextField @bind-Value="lastName" Label="Last Name" Placeholder="Enter user last name" Required OnlyValidateIfDirty Validation="ValidateLastName" />

            <MudTextField Mask="@mask1" Label="Phone Number" HelperText="@mask1.Mask"
                          @bind-Value="phoneNumber" Variant="@Variant.Text" Clearable Required InputType="InputType.Telephone" />

            <MudTextField Label="Email Address" HelperText="Ex. user@domain.com"
                          @bind-Value="email" Variant="@Variant.Text" Clearable Required OnlyValidateIfDirty InputType="InputType.Email" Validation="ValidateEmail" />

            <MudSelect @bind-Value="selectedRoleId" Label="Role" T="string">
                @foreach (var role in Roles)
                {
                    <MudSelectItem Value="@role.Id">@role.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-SelectedValues="selectedTrainerAuth0Ids" Label="Trainer" MultiSelection MultiSelectionTextFunc="@ToStringFuncMulti">
                @foreach (var trainer in Trainers)
                {
                    <MudSelectItem Value="@trainer.UserId">@trainer.FullName</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
    </MudForm>
    <br />
    <MudButton OnClick="SendInvitation" Variant="Variant.Filled" Color="Color.Primary" Disabled="!validForm">Send Invitation</MudButton>
    <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Secondary">Cancel</MudButton>
</MudContainer>

@code {
    bool validForm;

    private string firstName;
    private string lastName;
    private string fullName => $"{firstName} {lastName}";
    private string phoneNumber;
    private string email;
    
    private string selectedRoleId;
    private IList<Role> Roles = new List<Role>();
    private IEnumerable<string> selectedTrainerAuth0Ids = new List<string>();
    private IList<Auth0UserDto> Trainers = new List<Auth0UserDto>();
    private Func<IEnumerable<string>, string> ToStringFuncMulti;

    private Func<string, bool> ValidateFirstName = value => !string.IsNullOrWhiteSpace(value) && value.Length >= 2;
    private Func<string, bool> ValidateLastName = value => !string.IsNullOrWhiteSpace(value) && value.Length >= 2;
    private Func<string, bool> ValidateEmail = email =>
    {
    // Basic regex for email validation
    var emailRegex = new Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");
    return !string.IsNullOrWhiteSpace(email) && emailRegex.IsMatch(email);
    };
    public PatternMask mask1 = new PatternMask("XXX-XXX-XXXX")
        {
            MaskChars = new[] { new MaskChar('X', @"[0-9]") },
            Placeholder = '_',
            CleanDelimiters = true,
        };

    protected override async Task OnInitializedAsync()
    {
        string roleFilter = UserService.IsAdmin ? null : "Client";
        Roles = await Auth0UserService.GetAllRolesAsync(roleFilter);
        Trainers = await Auth0UserService.GetUsersByRole("rol_r6m4hjYSOGhc3HWp");
        ToStringFuncMulti = (selectedIds) =>
        {
            var selectedTrainers = Trainers.Where(t => selectedIds.Contains(t.UserId)).Select(t => t.FullName);
            return string.Join(", ", selectedTrainers);
        };
    }

    private async Task SendInvitation()
    {
        // Create client user and get their Auth0 ID
        var clientAuth0Id = await Auth0UserService.CreateUserAndSendResetEmailAsync(firstName, lastName, fullName, phoneNumber, email, selectedRoleId);

        // Get the user's internal ID based on the Auth0 ID
        var clientUserId = await GetUserIdByAuth0IdUseCase.ExecuteAsync(clientAuth0Id);

        IEnumerable<Guid> trainerUserIds = Enumerable.Empty<Guid>(); // Default to an empty list

        if (selectedTrainerAuth0Ids != null && selectedTrainerAuth0Ids.Any())
        {
            trainerUserIds = await GetUserIdsByAuth0IdsUseCase.ExecuteAsync(selectedTrainerAuth0Ids);
        }

        // Add the trainer-client relationship if both IDs are valid
        if (trainerUserIds.Any())
        {
            // Ensure you have a valid trainerUserId, which is likely from the first trainer in the list
            var trainerUserId = trainerUserIds.First(); // Use the first trainer ID for the relationship
            await AddTrainerClientRelationshipUseCase.ExecuteAsync(clientUserId, trainerUserIds);
        }
        // Delay for a short duration so the changes can be reflected in auth0. Might be able to avoid this later by using the ServerData feature of the mud table
        await Task.Delay(1000);

        NavigationManager.NavigateTo("/user-management");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/user-management");
    }
}
